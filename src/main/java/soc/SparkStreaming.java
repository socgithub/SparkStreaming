/**
How to run?

./bin/spark-submit --master spark://htliang.local:7077 --class org.apache.spark.examples.streaming.JavaNetworkWordCount  "/Users/htliang/spark-1.1.0-bin-hadoop2.4/lib/spark-examples-1.1.0-hadoop2.4.0.jar" localhost 9999

/Users/htliang/spark-1.1.0-bin-hadoop2.4/bin/spark-submit --class soc.SparkStreaming --master spark://htliang.local:7077 --num-executors 3 --driver-memory 4g --executor-memory 2g --executor-cores 1 ./target/SparkStreaming-1.jar localhost 9999 
**/

package soc;

import scala.Tuple2;

import com.google.common.collect.Lists;
import org.apache.spark.SparkConf;
import org.apache.spark.api.java.function.FlatMapFunction;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFunction;
import org.apache.spark.api.java.JavaPairRDD;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Collections;
import java.util.regex.Pattern;

/**
 * Counts words in UTF8 encoded, '\n' delimited text received from the network every second.
 * Usage: JavaNetworkWordCount <hostname> <port>
 *   <hostname> and <port> describe the TCP server that Spark Streaming would connect to receive data.
 *
 * To run this on your local machine, you need to first run a Netcat server
 *    `$ nc -lk 9999`
 * and then run the example
 *    `$ bin/run-example org.apache.spark.examples.streaming.JavaNetworkWordCount localhost 9999`
 */
public final class SparkStreaming {
  private static final Pattern SPACE = Pattern.compile(" ");
  public static JavaSparkContext ctx;
  public static void main(String[] args) {
    if (args.length < 2) {
      System.err.println("Usage: SparkStreaming <hostname> <port>");
      System.exit(1);
    }
    
    // Create the context with a 1 second batch size
    SparkConf sparkConf = new SparkConf().setAppName("SparkStreaming");
    ctx = new JavaSparkContext(sparkConf);
    JavaStreamingContext ssc = new JavaStreamingContext(ctx,  new Duration(Properties.FREQUENCY));
    ssc.checkpoint("target/checkpoint/");
    
    // Create a JavaReceiverInputDStream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    JavaReceiverInputDStream<String> lines = ssc.socketTextStream(
            args[0], Integer.parseInt(args[1]), StorageLevels.MEMORY_AND_DISK_SER);
    
    // SparkSQL
    lines.foreach(new Function<JavaRDD<String>, Void> () {
        public Void call(JavaRDD<String> line) {
            if(line.count() == 0 || !line.take(1).get(0).contains("user_login:"))
                return null;
            SparkSQL.recommandMovies(line.take(1).get(0));
            return null;
        }
    });
    
    JavaDStream<String> words = lines.flatMap(new FlatMapFunction<String, String>() {
      public Iterable<String> call(String x) {
        if(x.contains("user_login:")) {
            return Lists.newArrayList(Collections.EMPTY_LIST);            
        }
        else if (x.contains("user_created:") || x.contains("movie_created:")) {
            SparkSQL.toDatabase(x);
            return Lists.newArrayList(Collections.EMPTY_LIST);            
        }
        else
            return Lists.newArrayList(SPACE.split(x));
      }
    });

    JavaPairDStream<String, Integer> tuples = words.mapToPair(
      new PairFunction<String, String, Integer>() {
        public Tuple2<String, Integer> call(String s) {
          return new Tuple2<String, Integer>(s, 1);
        }
      }).reduceByKey(new Function2<Integer, Integer, Integer>() {
        public Integer call(Integer i1, Integer i2) { return i1 + i2; }
      }
    );
    JavaPairDStream<String, Integer> counts = tuples.reduceByKeyAndWindow(
      new Function2<Integer, Integer, Integer>() {
        public Integer call(Integer i1, Integer i2) { return i1 + i2; }
      }, new Function2<Integer, Integer, Integer>() {
        public Integer call(Integer i1, Integer i2) { return i1 - i2; }
      }, new Duration(1 * 60 * 1000), new Duration(Properties.FREQUENCY)
    );
    JavaPairDStream<Integer, String> swappedCounts = counts.mapToPair(
      new PairFunction<Tuple2<String, Integer>, Integer, String>() {
        public Tuple2<Integer, String> call(Tuple2<String, Integer> in) { return in.swap(); }
      }
    );
    JavaPairDStream<Integer, String> sortedCounts = swappedCounts.transformToPair(
      new Function<JavaPairRDD<Integer, String>, JavaPairRDD<Integer, String>>() {
        public JavaPairRDD<Integer, String> call(JavaPairRDD<Integer, String> in) throws Exception {
          return in.sortByKey(false);}
      }
    );
    sortedCounts.foreach(
      new Function<JavaPairRDD<Integer, String>, Void> () {
        public Void call(JavaPairRDD<Integer, String> rdd) throws IOException {
          FileWriter fw = new FileWriter(new File(Properties.RECENT_POPULAR), false); // true to append
          String out = "Top 10 hashtags:\n";
          for (Tuple2<Integer, String> t: rdd.take(10)) {
              if(t.toString().contains("(0,"))
                  continue;
              out = out + t.toString() + "\n";
          }
          System.out.println(out);
          fw.write(out);
          fw.close();
          return null;
        }
      }
    );
    
    //counts.print();
    //counts.saveAsHadoopFiles("/users/htliang/SparkStreaming/output/tag", "out", String.class, String.class, (Class) TextOutputFormat.class);

    /*The most popular in history*/
    JavaPairDStream<String, Integer> historyCounts = tuples.reduceByKeyAndWindow(
      new Function2<Integer, Integer, Integer>() {
        public Integer call(Integer i1, Integer i2) { return i1 + i2; }
      }, new Function2<Integer, Integer, Integer>() {
        public Integer call(Integer i1, Integer i2) { return i1 - i2; }
      }, new Duration(8 * 60 * 60 * 1000), new Duration(Properties.FREQUENCY)
    );
    JavaPairDStream<Integer, String> swappedHistoryCounts = historyCounts.mapToPair(
      new PairFunction<Tuple2<String, Integer>, Integer, String>() {
        public Tuple2<Integer, String> call(Tuple2<String, Integer> in) { return in.swap(); }
      }
    );
    JavaPairDStream<Integer, String> sortedHistoryCounts = swappedHistoryCounts.transformToPair(
      new Function<JavaPairRDD<Integer, String>, JavaPairRDD<Integer, String>>() {
        public JavaPairRDD<Integer, String> call(JavaPairRDD<Integer, String> in) throws Exception {
          return in.sortByKey(false);}
      }
    );
    
    sortedHistoryCounts.foreach(
      new Function<JavaPairRDD<Integer, String>, Void> () {
        public Void call(JavaPairRDD<Integer, String> rdd) throws IOException {
          FileWriter fw = new FileWriter(new File(Properties.MOST_POPULAR), false); // true to append
          String out = "Top 10 hashtags in history:\n";
          for (Tuple2<Integer, String> t: rdd.take(10)) {
            out = out + t.toString() + "\n";
          }
          System.out.println(out);
          fw.write(out);
          fw.close();
          return null;
        }
      }
    );
    
    ssc.start();
    ssc.awaitTermination();
  }
}

